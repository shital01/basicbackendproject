
> settle@1.0.0 test
> export NODE_ENV=test&&export PORT=0 && jest --watchAll --verbose --coverage

info: app name: Settle {"timestamp":"2023-10-09T09:23:54.473Z"}
info: app name: Settle {"timestamp":"2023-10-09T09:23:54.473Z"}
info: listening to port 0... {"timestamp":"2023-10-09T09:23:55.336Z"}
info: listening to port 0... {"timestamp":"2023-10-09T09:23:55.348Z"}
info: Connected to Mongodb...mongodb://localhost/playground_tests?retryWrites=true&w=majority {"timestamp":"2023-10-09T09:23:55.361Z"}
GET /api/uploadurlrequest/ 401 45 - 5.516 ms
info: Connected to Mongodb...mongodb://localhost/playground_tests?retryWrites=true&w=majority {"timestamp":"2023-10-09T09:23:55.385Z"}
  console.log
    { message: 'Access denied NO token Provided' }

      at Object.log (test/integration/uploadroutes.test.js:108:12)

POST /api/otps/generate 400 176 - 45.305 ms
GET /api/uploadurlrequest/ 400 27 - 1.243 ms
  console.log
    { message: 'Invalid Token' }

      at Object.log (test/integration/uploadroutes.test.js:115:12)

  console.log
    {
      message: 'Phone number must have 10 digits.',
      path: [ 'phoneNumber' ],
      type: 'string.pattern.base',
      context: { regex: {}, value: '1', label: 'phoneNumber', key: 'phoneNumber' }
    }

      at Object.log (test/integration/otps.test.js:43:12)

POST /api/otps/generate 400 186 - 1.629 ms
  console.log
    {
      message: 'Phone number must have 10 digits.',
      path: [ 'phoneNumber' ],
      type: 'string.pattern.base',
      context: {
        regex: {},
        value: '12345678901',
        label: 'phoneNumber',
        key: 'phoneNumber'
      }
    }

      at Object.log (test/integration/otps.test.js:50:12)

POST /api/otps/generate 400 154 - 1.579 ms
  console.log
    {
      message: '"phoneNumber" must be a string',
      path: [ 'phoneNumber' ],
      type: 'string.base',
      context: { label: 'phoneNumber', value: 1, key: 'phoneNumber' }
    }

      at Object.log (test/integration/otps.test.js:58:12)

POST /api/otps/generate 400 185 - 0.789 ms
  console.log
    {
      message: 'Phone number must have 10 digits.',
      path: [ 'phoneNumber' ],
      type: 'string.pattern.base',
      context: {
        regex: {},
        value: '12345qwert',
        label: 'phoneNumber',
        key: 'phoneNumber'
      }
    }

      at Object.log (test/integration/otps.test.js:65:12)

POST /api/otps/generate 400 157 - 0.782 ms
  console.log
    {
      message: '"phoneNumber" must be a string',
      path: [ 'phoneNumber' ],
      type: 'string.base',
      context: { label: 'phoneNumber', value: null, key: 'phoneNumber' }
    }

      at Object.log (test/integration/otps.test.js:72:12)

error: Configuration property "userid" is not defined Configuration property "userid" is not defined {"stack":"Error: Configuration property \"userid\" is not defined\n    at Config.Object.<anonymous>.Config.get (/Users/sheetalgodara/Settle/node_modules/config/lib/config.js:179:11)\n    at get (/Users/sheetalgodara/Settle/dummy folder/middleware/sendmessage.js:17:24)\n    at sendmessage (/Users/sheetalgodara/Settle/dummy folder/routes/otps.js:62:24)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)","timestamp":"2023-10-09T09:23:55.614Z"}
POST /api/otps/generate 500 2 - 94.342 ms
POST /api/otps/verify 400 176 - 1.211 ms
  console.log
    {
      message: 'Phone number must have 10 digits.',
      path: [ 'phoneNumber' ],
      type: 'string.pattern.base',
      context: { regex: {}, value: '1', label: 'phoneNumber', key: 'phoneNumber' }
    }

      at Object.log (test/integration/otps.test.js:123:12)

POST /api/otps/verify 400 185 - 0.978 ms
  console.log
    {
      message: 'Phone number must have 10 digits.',
      path: [ 'phoneNumber' ],
      type: 'string.pattern.base',
      context: {
        regex: {},
        value: '12345qwert',
        label: 'phoneNumber',
        key: 'phoneNumber'
      }
    }

      at Object.log (test/integration/otps.test.js:131:12)

POST /api/otps/verify 400 163 - 0.931 ms
  console.log
    {
      message: '"phoneNumber" must be a string',
      path: [ 'phoneNumber' ],
      type: 'string.base',
      context: { label: 'phoneNumber', value: 1234567890, key: 'phoneNumber' }
    }

      at Object.log (test/integration/otps.test.js:139:12)

POST /api/otps/verify 400 143 - 1.147 ms
  console.log
    {
      message: 'OTP  must have 4 digits.',
      path: [ 'otp' ],
      type: 'string.pattern.base',
      context: { regex: {}, value: '1', label: 'otp', key: 'otp' }
    }

      at Object.log (test/integration/otps.test.js:148:12)

POST /api/otps/verify 400 146 - 0.981 ms
  console.log
    {
      message: 'OTP  must have 4 digits.',
      path: [ 'otp' ],
      type: 'string.pattern.base',
      context: { regex: {}, value: '1as3', label: 'otp', key: 'otp' }
    }

      at Object.log (test/integration/otps.test.js:157:12)

POST /api/otps/verify 400 178 - 0.878 ms
  console.log
    {
      message: 'Phone number must have 10 digits.',
      path: [ 'phoneNumber' ],
      type: 'string.pattern.base',
      context: { regex: {}, value: '123', label: 'phoneNumber', key: 'phoneNumber' }
    }

      at Object.log (test/integration/otps.test.js:166:12)

POST /api/otps/verify 404 25 - 4.863 ms
  console.log
    { message: 'Invalid OTP' }

      at Object.log (test/integration/otps.test.js:175:12)

POST /api/otps/verify 404 25 - 61.867 ms
  console.log
    { message: 'Invalid OTP' }

      at Object.log (test/integration/otps.test.js:186:12)

POST /api/otps/verify 200 90 - 72.997 ms
POST /api/otps/verify 404 25 - 2.405 ms
  console.log
    { message: 'Invalid OTP' }

      at Object.log (test/integration/otps.test.js:216:12)

POST /api/otps/verify 404 25 - 61.452 ms
  console.log
    { message: 'Invalid OTP' }

      at Object.log (test/integration/otps.test.js:228:12)

POST /api/otps/verify 200 97 - 64.480 ms
info: app name: Settle {"timestamp":"2023-10-09T09:23:57.396Z"}
info: listening to port 0... {"timestamp":"2023-10-09T09:23:57.632Z"}
info: Connected to Mongodb...mongodb://localhost/playground_tests?retryWrites=true&w=majority {"timestamp":"2023-10-09T09:23:57.658Z"}
PUT /api/users/updateprofile 401 45 - 7.113 ms
  console.log
    { message: 'Access denied NO token Provided' }

      at Object.log (test/integration/users.test.js:41:12)

PUT /api/users/updateprofile 400 27 - 0.851 ms
  console.log
    { message: 'Invalid Token' }

      at Object.log (test/integration/users.test.js:48:12)

PUT /api/users/updateprofile 400 126 - 5.537 ms
  console.log
    {
      message: '"name" must be a string',
      path: [ 'name' ],
      type: 'string.base',
      context: { label: 'name', value: 3, key: 'name' }
    }

      at Object.log (test/integration/users.test.js:56:12)

PUT /api/users/updateprofile 400 677 - 2.142 ms
  console.log
    {
      message: '"name" length must be less than or equal to 64 characters long',
      path: [ 'name' ],
      type: 'string.max',
      context: {
        limit: 64,
        value: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        label: 'name',
        key: 'name'
      }
    }

      at Object.log (test/integration/users.test.js:64:12)

PUT /api/users/updateprofile 400 126 - 2.108 ms
  console.log
    {
      message: '"name" must be a string',
      path: [ 'name' ],
      type: 'string.base',
      context: { label: 'name', value: 1, key: 'name' }
    }

      at Object.log (test/integration/users.test.js:72:12)

PUT /api/users/updateprofile 400 188 - 2.268 ms
  console.log
    {
      message: '"phoneNumber" is not allowed',
      path: [ 'phoneNumber' ],
      type: 'object.unknown',
      context: {
        child: 'phoneNumber',
        label: 'phoneNumber',
        value: '1231231231',
        key: 'phoneNumber'
      }
    }

      at Object.log (test/integration/users.test.js:80:12)

PUT /api/users/updateprofile 400 185 - 2.112 ms
  console.log
    {
      message: '"contactsSent" is not allowed',
      path: [ 'contactsSent' ],
      type: 'object.unknown',
      context: {
        child: 'contactsSent',
        label: 'contactsSent',
        value: true,
        key: 'contactsSent'
      }
    }

      at Object.log (test/integration/users.test.js:88:12)

PUT /api/users/updateprofile 400 160 - 1.996 ms
  console.log
    {
      message: '"pancard" is not allowed',
      path: [ 'pancard' ],
      type: 'object.unknown',
      context: { child: 'pancard', label: 'pancard', value: '23', key: 'pancard' }
    }

      at Object.log (test/integration/users.test.js:96:12)

PUT /api/users/updateprofile 400 178 - 2.411 ms
  console.log
    {
      message: '"profilePictureUrl" must be a string',
      path: [ 'profilePictureUrl' ],
      type: 'string.base',
      context: { label: 'profilePictureUrl', value: 3, key: 'profilePictureUrl' }
    }

      at Object.log (test/integration/users.test.js:104:12)

PUT /api/users/updateprofile 400 27 - 5.714 ms
  console.log
    { message: 'No User exits' }

      at Object.log (test/integration/users.test.js:111:12)

PUT /api/users/updateprofile 400 127 - 2.031 ms
  console.log
    {
      message: '"name" must be a string',
      path: [ 'name' ],
      type: 'string.base',
      context: { label: 'name', value: 12, key: 'name' }
    }

      at Object.log (test/integration/users.test.js:120:12)

PUT /api/users/updateprofile 200 101 - 12.698 ms
PUT /api/users/updateprofile 200 127 - 10.243 ms
PUT /api/users/updateprofile 200 138 - 9.760 ms
  console.log
    {
      _id: '6523c6ad3a99e77fcb696781',
      name: 'newName',
      phoneNumber: '1234123412',
      contactsSent: false,
      __v: 0,
      profilePictureUrl: 'newImage'
    }

      at Object.log (test/integration/users.test.js:163:12)

POST /api/users/friendsprofile 401 45 - 0.546 ms
  console.log
    { message: 'Access denied NO token Provided' }

      at Object.log (test/integration/users.test.js:212:12)

POST /api/users/friendsprofile 400 27 - 0.721 ms
  console.log
    { message: 'Invalid Token' }

      at Object.log (test/integration/users.test.js:219:12)

POST /api/users/friendsprofile 400 159 - 14.532 ms
  console.log
    {
      message: '"phoneNumbers" must be an array',
      path: [ 'phoneNumbers' ],
      type: 'array.base',
      context: { label: 'phoneNumbers', value: '1', key: 'phoneNumbers' }
    }

      at Object.log (test/integration/users.test.js:226:12)

POST /api/users/friendsprofile 400 153 - 2.713 ms
  console.log
    {
      message: '"phoneNumbers[0]" must be a string',
      path: [ 'phoneNumbers', 0 ],
      type: 'string.base',
      context: { label: 'phoneNumbers[0]', value: 1, key: 0 }
    }

      at Object.log (test/integration/users.test.js:233:12)

POST /api/users/friendsprofile 400 180 - 2.275 ms
  console.log
    {
      message: 'Phone number must have 10 digits.',
      path: [ 'phoneNumbers', 0 ],
      type: 'string.pattern.base',
      context: { regex: {}, value: '1123qweqwe', label: 'phoneNumbers[0]', key: 0 }
    }

      at Object.log (test/integration/users.test.js:240:12)

POST /api/users/friendsprofile 200 218 - 5.153 ms
POST /api/users/friendsprofile 404 27 - 3.273 ms
POST /api/users/friendsprofile 200 78 - 3.575 ms
info: app name: Settle {"timestamp":"2023-10-09T09:23:58.851Z"}
info: listening to port 0... {"timestamp":"2023-10-09T09:23:59.066Z"}
GET /api/transactions/ 401 45 - 3.142 ms
info: Connected to Mongodb...mongodb://localhost/playground_tests?retryWrites=true&w=majority {"timestamp":"2023-10-09T09:23:59.088Z"}
  console.log
    { message: 'Access denied NO token Provided' }

      at Object.log (test/integration/transactions.test.js:98:12)

GET /api/transactions/ 400 27 - 0.982 ms
  console.log
    { message: 'Invalid Token' }

      at Object.log (test/integration/transactions.test.js:105:12)

GET /api/transactions/ 200 1116 - 10.075 ms
PUT /api/transactions/fetchtransactions 401 45 - 6.161 ms
  console.log
    { message: 'Access denied NO token Provided' }

      at Object.log (test/integration/transactions.test.js:203:12)

PUT /api/transactions/fetchtransactions 400 27 - 0.787 ms
  console.log
    { message: 'Invalid Token' }

      at Object.log (test/integration/transactions.test.js:210:12)

PUT /api/transactions/fetchtransactions 400 195 - 4.942 ms
  console.log
    {
      message: '"lastUpdatedTimeStamp" must be a valid date',
      path: [ 'lastUpdatedTimeStamp' ],
      type: 'date.base',
      context: {
        label: 'lastUpdatedTimeStamp',
        value: null,
        key: 'lastUpdatedTimeStamp'
      }
    }

      at Object.log (test/integration/transactions.test.js:217:12)

  console.log
    []

      at Object.log (test/integration/transactions.test.js:226:12)

PUT /api/transactions/fetchtransactions 200 2 - 3.655 ms
POST /api/transactions 401 45 - 0.395 ms
  console.log
    { message: 'Access denied NO token Provided' }

      at Object.log (test/integration/transactions.test.js:269:12)

POST /api/transactions 400 27 - 0.562 ms
  console.log
    { message: 'Invalid Token' }

      at Object.log (test/integration/transactions.test.js:276:12)

POST /api/transactions 400 136 - 14.725 ms
  console.log
    {
      message: '"friendName" is required',
      path: [ 'friendName' ],
      type: 'any.required',
      context: { label: 'friendName', key: 'friendName' }
    }

      at Object.log (test/integration/transactions.test.js:284:12)

POST /api/transactions 400 136 - 2.324 ms
  console.log
    {
      message: '"friendName" is required',
      path: [ 'friendName' ],
      type: 'any.required',
      context: { label: 'friendName', key: 'friendName' }
    }

      at Object.log (test/integration/transactions.test.js:292:12)

POST /api/transactions 400 136 - 2.429 ms
  console.log
    {
      message: '"friendName" is required',
      path: [ 'friendName' ],
      type: 'any.required',
      context: { label: 'friendName', key: 'friendName' }
    }

      at Object.log (test/integration/transactions.test.js:300:12)

POST /api/transactions 400 153 - 2.329 ms
  console.log
    {
      message: '"friendName" must be a string',
      path: [ 'friendName' ],
      type: 'string.base',
      context: { label: 'friendName', value: null, key: 'friendName' }
    }

      at Object.log (test/integration/transactions.test.js:308:12)

POST /api/transactions 400 151 - 2.413 ms
  console.log
    {
      message: '"friendName" must be a string',
      path: [ 'friendName' ],
      type: 'string.base',
      context: { label: 'friendName', value: 12, key: 'friendName' }
    }

      at Object.log (test/integration/transactions.test.js:316:12)

POST /api/transactions 400 181 - 2.532 ms
  console.log
    {
      message: '"friendPhoneNumber" must be a string',
      path: [ 'friendPhoneNumber' ],
      type: 'string.base',
      context: { label: 'friendPhoneNumber', value: null, key: 'friendPhoneNumber' }
    }

      at Object.log (test/integration/transactions.test.js:324:12)

POST /api/transactions 400 179 - 2.199 ms
  console.log
    {
      message: '"friendPhoneNumber" must be a string',
      path: [ 'friendPhoneNumber' ],
      type: 'string.base',
      context: { label: 'friendPhoneNumber', value: 12, key: 'friendPhoneNumber' }
    }

      at Object.log (test/integration/transactions.test.js:332:12)

POST /api/transactions 400 203 - 2.217 ms
  console.log
    {
      message: 'Phone number must have 10 digits.',
      path: [ 'friendPhoneNumber' ],
      type: 'string.pattern.base',
      context: {
        regex: {},
        value: '123123qwqw',
        label: 'friendPhoneNumber',
        key: 'friendPhoneNumber'
      }
    }

      at Object.log (test/integration/transactions.test.js:340:12)

POST /api/transactions 400 145 - 2.520 ms
  console.log
    {
      message: '"amount" must be a number',
      path: [ 'amount' ],
      type: 'number.base',
      context: { label: 'amount', value: '123123qwqw', key: 'amount' }
    }

      at Object.log (test/integration/transactions.test.js:348:12)

POST /api/transactions 400 191 - 2.292 ms
  console.log
    {
      message: '"amount" must be greater than or equal to -1000000000',
      path: [ 'amount' ],
      type: 'number.min',
      context: {
        limit: -1000000000,
        value: -1000000001,
        label: 'amount',
        key: 'amount'
      }
    }

      at Object.log (test/integration/transactions.test.js:356:12)

POST /api/transactions 400 185 - 2.107 ms
  console.log
    {
      message: '"amount" must be less than or equal to 1000000000',
      path: [ 'amount' ],
      type: 'number.max',
      context: {
        limit: 1000000000,
        value: 1000000001,
        label: 'amount',
        key: 'amount'
      }
    }

      at Object.log (test/integration/transactions.test.js:364:12)

POST /api/transactions 400 169 - 2.374 ms
  console.log
    {
      message: '"interestRate" must be a number',
      path: [ 'interestRate' ],
      type: 'number.base',
      context: { label: 'interestRate', value: '123123qwqw', key: 'interestRate' }
    }

      at Object.log (test/integration/transactions.test.js:372:12)

POST /api/transactions 400 187 - 2.398 ms
  console.log
    {
      message: '"interestRate" must be greater than or equal to 0',
      path: [ 'interestRate' ],
      type: 'number.min',
      context: { limit: 0, value: -12, label: 'interestRate', key: 'interestRate' }
    }

      at Object.log (test/integration/transactions.test.js:380:12)

POST /api/transactions 400 188 - 2.042 ms
  console.log
    {
      message: '"interestRate" must be less than or equal to 100',
      path: [ 'interestRate' ],
      type: 'number.max',
      context: {
        limit: 100,
        value: 104,
        label: 'interestRate',
        key: 'interestRate'
      }
    }

      at Object.log (test/integration/transactions.test.js:388:12)

POST /api/transactions 400 208 - 2.376 ms
  console.log
    {
      message: '"interestType" must be one of [S, N, CY, CW, CM]',
      path: [ 'interestType' ],
      type: 'any.only',
      context: {
        valids: [ 'S', 'N', 'CY', 'CW', 'CM' ],
        label: 'interestType',
        value: 102,
        key: 'interestType'
      }
    }

      at Object.log (test/integration/transactions.test.js:396:12)

POST /api/transactions 400 208 - 1.996 ms
  console.log
    {
      message: '"interestType" must be one of [S, N, CY, CW, CM]',
      path: [ 'interestType' ],
      type: 'any.only',
      context: {
        valids: [ 'S', 'N', 'CY', 'CW', 'CM' ],
        label: 'interestType',
        value: 'C',
        key: 'interestType'
      }
    }

      at Object.log (test/integration/transactions.test.js:404:12)

POST /api/transactions 400 175 - 2.052 ms
  console.log
    {
      message: '"transactionDate" must be a valid date',
      path: [ 'transactionDate' ],
      type: 'date.base',
      context: { label: 'transactionDate', value: null, key: 'transactionDate' }
    }

      at Object.log (test/integration/transactions.test.js:412:12)

POST /api/transactions 400 178 - 2.095 ms
  console.log
    {
      message: '"attachmentsPath" must be an array',
      path: [ 'attachmentsPath' ],
      type: 'array.base',
      context: {
        label: 'attachmentsPath',
        value: 'imageurl',
        key: 'attachmentsPath'
      }
    }

      at Object.log (test/integration/transactions.test.js:420:12)

POST /api/transactions 400 166 - 2.437 ms
  console.log
    {
      message: '"attachmentsPath[0]" must be a string',
      path: [ 'attachmentsPath', 0 ],
      type: 'string.base',
      context: { label: 'attachmentsPath[0]', value: false, key: 0 }
    }

      at Object.log (test/integration/transactions.test.js:428:12)

POST /api/transactions 400 234 - 2.375 ms
  console.log
    {
      message: '"attachmentsPath" must contain less than or equal to 4 items',
      path: [ 'attachmentsPath' ],
      type: 'array.max',
      context: {
        limit: 4,
        value: [ 'imageurl', 'q', 'qw', 'qw', 'we' ],
        label: 'attachmentsPath',
        key: 'attachmentsPath'
      }
    }

      at Object.log (test/integration/transactions.test.js:436:12)

POST /api/transactions 400 155 - 1.900 ms
  console.log
    {
      message: '"description" must be a string',
      path: [ 'description' ],
      type: 'string.base',
      context: { label: 'description', value: 12, key: 'description' }
    }

      at Object.log (test/integration/transactions.test.js:444:12)

POST /api/transactions 400 707 - 1.951 ms
  console.log
    {
      message: '"description" length must be less than or equal to 500 characters long',
      path: [ 'description' ],
      type: 'string.max',
      context: {
        limit: 500,
        value: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
        label: 'description',
        key: 'description'
      }
    }

      at Object.log (test/integration/transactions.test.js:453:12)

POST /api/transactions 200 365 - 10.700 ms
POST /api/transactions 200 393 - 8.286 ms
DELETE /api/transactions/delete 401 45 - 0.381 ms
  console.log
    { message: 'Access denied NO token Provided' }

      at Object.log (test/integration/transactions.test.js:533:12)

DELETE /api/transactions/delete 400 27 - 0.495 ms
  console.log
    { message: 'Invalid Token' }

      at Object.log (test/integration/transactions.test.js:540:12)

DELETE /api/transactions/delete 400 249 - 2.271 ms
  console.log
    {
      message: '"transactionId" with value "1" fails to match the valid mongo id pattern',
      path: [ 'transactionId' ],
      type: 'string.pattern.name',
      context: {
        name: 'valid mongo id',
        regex: {},
        value: '1',
        label: 'transactionId',
        key: 'transactionId'
      }
    }

      at Object.log (test/integration/transactions.test.js:547:12)

DELETE /api/transactions/delete 400 57 - 3.137 ms
  console.log
    { message: 'No Such Transaction exits wrong id provided' }

      at Object.log (test/integration/transactions.test.js:554:12)

DELETE /api/transactions/delete 403 37 - 3.504 ms
  console.log
    { message: 'Not Access for deleting' }

      at Object.log (test/integration/transactions.test.js:561:12)

DELETE /api/transactions/delete 200 389 - 12.490 ms
info: app name: Settle {"timestamp":"2023-10-09T09:24:00.225Z"}
info: listening to port 0... {"timestamp":"2023-10-09T09:24:00.428Z"}
POST /api/contact/addcontacts 401 45 - 7.194 ms
  console.log
    { message: 'Access denied NO token Provided' }

      at Object.log (test/integration/contacts.test.js:39:12)

info: Connected to Mongodb...mongodb://localhost/playground_tests?retryWrites=true&w=majority {"timestamp":"2023-10-09T09:24:00.463Z"}
POST /api/contact/addcontacts 400 27 - 0.997 ms
  console.log
    { message: 'Invalid Token' }

      at Object.log (test/integration/contacts.test.js:46:12)

POST /api/contact/addcontacts 400 142 - 5.783 ms
  console.log
    {
      message: '"C" must be an array',
      path: [ 'C' ],
      type: 'array.base',
      context: { label: 'C', value: { P: '1231231231', N: 'name1' }, key: 'C' }
    }

      at Object.log (test/integration/contacts.test.js:53:12)

POST /api/contact/addcontacts 400 139 - 2.509 ms
  console.log
    {
      message: '"C[0].P" must be a string',
      path: [ 'C', 0, 'P' ],
      type: 'string.base',
      context: { label: 'C[0].P', value: 1231231231, key: 'P' }
    }

      at Object.log (test/integration/contacts.test.js:60:12)

POST /api/contact/addcontacts 400 133 - 3.041 ms
  console.log
    {
      message: '"C[0].N" must be a string',
      path: [ 'C', 0, 'N' ],
      type: 'string.base',
      context: { label: 'C[0].N', value: true, key: 'N' }
    }

      at Object.log (test/integration/contacts.test.js:67:12)

  console.log
    CP: 1234123412

      at log (routes/contact.js:24:11)

  console.log
    CN: name1

      at log (routes/contact.js:25:9)

POST /api/contact/addcontacts 404 27 - 33.501 ms
  console.log
    CP: 1234123412

      at log (routes/contact.js:24:11)

  console.log
    CN: name1

      at log (routes/contact.js:25:9)

POST /api/contact/addcontacts 200 104 - 24.805 ms
  console.log
    [
      {
        _id: new ObjectId("6523c6b073a1cf4b15ff69cd"),
        name: 'name1',
        phoneNumber: '1234123412',
        contactsSent: true,
        __v: 0
      }
    ]

      at Object.log (test/integration/contacts.test.js:107:12)

GET /api/uploadurlrequest/ 200 76 - 5282.199 ms
-------------------------|---------|----------|---------|---------|----------------------------------------------------------------------
File                     | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s                                                    
-------------------------|---------|----------|---------|---------|----------------------------------------------------------------------
All files                |   76.95 |    65.78 |   59.61 |   76.49 |                                                                      
 dummy folder            |   66.66 |    41.66 |      25 |   65.51 |                                                                      
  index.js               |   66.66 |    41.66 |      25 |   65.51 | 11-21,28                                                             
 dummy folder/middleware |   72.72 |    33.33 |      75 |   74.19 |                                                                      
  auth.js                |     100 |      100 |     100 |     100 |                                                                      
  authorization.js       |      50 |        0 |       0 |      60 | 7-10                                                                 
  error.js               |     100 |      100 |     100 |     100 |                                                                      
  sendmessage.js         |      50 |        0 |     100 |      50 | 26-42                                                                
 dummy folder/models     |   88.88 |      100 |   72.72 |   88.88 |                                                                      
  contact.js             |     100 |      100 |     100 |     100 |                                                                      
  otp.js                 |     100 |      100 |     100 |     100 |                                                                      
  sms.js                 |      40 |      100 |       0 |      40 | 5-37                                                                 
  transaction.js         |     100 |      100 |     100 |     100 |                                                                      
  user.js                |     100 |      100 |     100 |     100 |                                                                      
 dummy folder/routes     |    72.5 |       75 |      50 |   71.48 |                                                                      
  admin.js               |      38 |      100 |       0 |      38 | 31-32,37-38,42-43,48-49,55-74,80-105,110-142,149-172,178-205,210-240 
  contact.js             |     100 |      100 |     100 |     100 |                                                                      
  otps.js                |    90.9 |    81.25 |     100 |   90.38 | 52,63,92-94                                                          
  sendsms.js             |   21.56 |        0 |       0 |   21.56 | 23-43,51-71,76-90                                                    
  transactions.js        |     100 |      100 |     100 |     100 |                                                                      
  uploadroutes.js        |    92.3 |      100 |      50 |    92.3 | 24                                                                   
  users.js               |     100 |      100 |     100 |     100 |                                                                      
 dummy folder/startup    |      98 |    66.66 |     100 |      98 |                                                                      
  config.js              |   83.33 |       50 |     100 |   83.33 | 8                                                                    
  db.js                  |     100 |      100 |     100 |     100 |                                                                      
  logging.js             |     100 |       75 |     100 |     100 | 27                                                                   
  routes.js              |     100 |      100 |     100 |     100 |                                                                      
  validate.js            |     100 |      100 |     100 |     100 |                                                                      
-------------------------|---------|----------|---------|---------|----------------------------------------------------------------------


